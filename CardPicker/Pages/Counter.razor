@page "/counter"
@using Dropbox.Api;

@inject NavigationManager NavManager
@inject HttpClient Http

<h1>Kazamata Kaszinó</h1>

<p>Current code: @accessCode</p>

<button class="btn btn-primary" @onclick="Login">Login</button>
<button class="btn btn-primary" @onclick="Auth">Auth</button>
<button class="btn btn-primary" type="button" @onclick="() => GetImage()">Draw Card</button>

<div class="cards">
    <img class="card" src="/images/pakli.png" />
    <img class="card spinner" src="/images/uroborosz.gif" />
    <img class="card glow" src="/images/uroborosz_gif_glow.png" />
    @if (!string.IsNullOrEmpty(imageJpgDataURL))
    {
        <img class="image picked" src="@imageJpgDataURL" />
    }
</div>

@code {

    private string accessCode;

    private string _accessToken;

    private string _appKey;

    private string _appSecret;

    private int currentCount = 0;

    private DropboxClient dropboxClient;

    private bool authWithCode = false;

    private List<string> foldersAndFiles;

    string imageJpgDataURL = string.Empty;
    string imageJpgDataURL2 = string.Empty;
    string imageJpgDataURL3 = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        NavManager.TryGetQueryString<string>("code", out accessCode);
        foldersAndFiles = new List<string>();
        _appKey = Environment.GetEnvironmentVariable("APP_KEY");
        _appSecret = Environment.GetEnvironmentVariable("APP_SECRET");
    }

    private async void Login()
    {
        currentCount++;
        var connectState = "N";
        var redirectUri = NavManager.Uri.Split("?")[0];

        var redirect = DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType.Code, _appKey, redirectUri, connectState);
        NavManager.NavigateTo(redirect.ToString());
    }

    private async void Auth()
    {
        var connectState = "N";
        var redirectUri = NavManager.Uri.Split("?")[0];

        OAuth2Response response = await DropboxOAuth2Helper.ProcessCodeFlowAsync(accessCode, _appKey, _appSecret, redirectUri);
        _accessToken = response.AccessToken;
        var testecske2 = response.ExpiresAt;

        dropboxClient = new DropboxClient(response.AccessToken);

        await ListFiles();
    }

    private async Task ListFiles()
    {
        if (dropboxClient is null)
        {
            return;
        }

        var list = await dropboxClient.Files.ListFolderAsync("/Cards");

        // show folders then files
        foreach (var item in list.Entries.Where(i => i.IsFolder))
        {
            Console.WriteLine("D  {0}/", item.Name);
            foldersAndFiles.Add(item.Name);
        }

        foreach (var item in list.Entries.Where(i => i.IsFile))
        {
            Console.WriteLine("F{0,8} {1}", item.AsFile.Size, item.Name);
            foldersAndFiles.Add(item.Name);
            await Download(item.PathLower);
        }
    }

    async Task Download(string path)
    {
        using (var response = await dropboxClient.Files.DownloadAsync(path))
        {
            var test = await response.GetContentAsByteArrayAsync();
        }
    }

    async Task GetImage()
    {
        dropboxClient = new DropboxClient(_accessToken);

        var list = await dropboxClient.Files.ListFolderAsync("/Cards");
        var cardsFromDropBox = list.Entries.Where(i => i.IsFile).ToList();

        var random = new Random();
        var chosenNumber = random.Next(0, 4);
        var chosenCard = cardsFromDropBox[chosenNumber];

        using (var response = await dropboxClient.Files.DownloadAsync($"/cards/{chosenCard.Name}"))
        {
            var imageBytes = await response.GetContentAsByteArrayAsync();
            var imageSrc = Convert.ToBase64String(imageBytes);
            imageJpgDataURL = string.Format("data:image/png;base64,{0}", imageSrc);
        }
    }
}
