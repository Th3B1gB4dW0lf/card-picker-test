@page "/kazamata-casino"
@page "/kazamata-casino/{accessToken}"

@using Dropbox.Api;
@using CardPicker.Data;

@inject NavigationManager NavManager
@inject HttpClient Http
@inject IJSRuntime _jsRuntime;

<h1>Kazamata Kaszinó</h1>

<p>DropBox status: @GetDropBoxConnectionStatusAsText()</p>

@if (!_connectedToDropBox)
{
    <button class="btn btn-primary" @onclick="Login">Login</button>
}
else
{
    <div>
        <button class="btn btn-primary" type="button" @onclick="() => GetCommonCard()">Húzás pakliból</button>
        <button class="btn btn-primary" type="button" @onclick="() => GetTreasureCard()">Húzás csak a kincsekből</button>
        @if (!string.IsNullOrEmpty(imagePngDataURL))
        {
            <button class="btn btn-primary button-with-margin" type="button" @onclick="() => ShowOrHideCard()">@GetTextForShowCard()</button>
        }
    </div>


    <div class="cards">
        @if (_state == DeckState.Waiting)
        {
            <img class="card" src="/images/pakli.png" />
        }
        else if (_state == DeckState.InProgress)
        {
            <img class="card" src="/images/pakli.png" />
            <img class="card glow" src="/images/uroborosz_gif_glow.png" />
            <img class="card spinner" src="/images/uroborosz.gif" />
        }
        else if (_state == DeckState.Completed)
        {
            <img class="card" src="/images/pakli.png" />
            <img class="image picked" src="@imagePngDataURL" />
        }
    </div>
}



<audio id="waiting-sound-effect" src="sounds/Waiting.mp3" />
<audio id="draw-sound-effect" src="sounds/Flip.mp3" />

@code {

    private string accessCode;

    private string _accessToken;

    private string _appKey;

    private string _appSecret;

    private DeckState _state;

    private bool _connectedToDropBox;

    private bool _cardStatus;

    private DropboxClient dropboxClient;

    private bool authWithCode = false;

    private List<string> foldersAndFiles;

    string imagePngDataURL = string.Empty;
    string imageJpgDataURL2 = string.Empty;
    string imageJpgDataURL3 = string.Empty;

    [Parameter]
    public string AccessToken { get; set; }

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        NavManager.TryGetQueryString<string>("code", out accessCode);
        foldersAndFiles = new List<string>();
        _appKey = Environment.GetEnvironmentVariable("APP_KEY");
        _appSecret = Environment.GetEnvironmentVariable("APP_SECRET");

        if (!string.IsNullOrEmpty(AccessToken))
        {
            if (dropboxClient == null)
            {
                dropboxClient = new DropboxClient(AccessToken);
                _connectedToDropBox = true;
            }
        }
    }

    private async void Login()
    {
        var connectState = "N";
        var redirectUri = NavManager.BaseUri + "auth";

        var redirect = DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType.Code, _appKey, redirectUri, connectState);
        NavManager.NavigateTo(redirect.ToString());
    }

    async Task Download(string path)
    {
        using (var response = await dropboxClient.Files.DownloadAsync(path))
        {
            var test = await response.GetContentAsByteArrayAsync();
        }
    }

    async Task GetCommonCard()
    {
        await GetImage("pakli");
    }

    async Task GetTreasureCard()
    {
        await GetImage("kincsek");
    }

    async Task GetImage(string source)
    {
        _state = DeckState.InProgress;
        await _jsRuntime.InvokeAsync<string>("PlayAudio", "waiting-sound-effect");

        var list = await dropboxClient.Files.ListFolderAsync($"/{source}");

        var cardsFromDropBox = list.Entries.Where(i => i.IsFile).ToList();

        var random = new Random();
        var chosenNumber = random.Next(0, cardsFromDropBox.Count-1);
        var chosenCard = cardsFromDropBox[chosenNumber];

        using (var response = await dropboxClient.Files.DownloadAsync($"/{source}/{chosenCard.Name}"))
        {
            var imageBytes = await response.GetContentAsByteArrayAsync();
            var imageSrc = Convert.ToBase64String(imageBytes);
            imagePngDataURL = string.Format("data:image/png;base64,{0}", imageSrc);
            _cardStatus = true;
        }
    }

    async Task ShowOrHideCard()
    {
        if (_state == DeckState.InProgress)
        {
            await _jsRuntime.InvokeAsync<string>("PlayAudio", "draw-sound-effect");
            _cardStatus = false;
            _state = DeckState.Completed;
        }
        else if (_state == DeckState.Completed)
        {
            _state = DeckState.Waiting;
            _cardStatus = false;
            imagePngDataURL = null;
        }
    }

    private string GetDropBoxConnectionStatusAsText()
    {
        return dropboxClient != null ? "Online" : "Offline";
    }

    private string GetCardStatusAsText()
    {
        return !string.IsNullOrEmpty(imagePngDataURL) ? "Igen" : "Nem";
    }

    private string GetTextForShowCard()
    {
        return _cardStatus ? "Mutat" : "Elrejt";
    }

    private bool IsConnectedToDropBox()
    {
        return dropboxClient != null;
    }
}
